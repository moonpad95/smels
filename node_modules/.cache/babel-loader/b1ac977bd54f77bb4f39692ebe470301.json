{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n    startingLineNumber = _ref.startingLineNumber,\n    style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n    codeStyle = _ref2.codeStyle,\n    _ref2$containerStyle = _ref2.containerStyle,\n    containerStyle = _ref2$containerStyle === void 0 ? {\n      float: 'left',\n      paddingRight: '10px'\n    } : _ref2$containerStyle,\n    _ref2$numberStyle = _ref2.numberStyle,\n    numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n    startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n  return assembledStyle;\n}\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n    lineNumber = _ref3.lineNumber,\n    lineNumberStyle = _ref3.lineNumberStyle,\n    largestLineNumber = _ref3.largestLineNumber,\n    showInlineLineNumbers = _ref3.showInlineLineNumbers,\n    _ref3$lineProps = _ref3.lineProps,\n    lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n    _ref3$className = _ref3.className,\n    className = _ref3$className === void 0 ? [] : _ref3$className,\n    showLineNumbers = _ref3.showLineNumbers,\n    wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread({}, properties.style, {\n      display: 'flex'\n    });\n  }\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n  return newTree;\n}\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n    return children;\n  }\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n          var _line = createLine(_children, lineNumber);\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n        } else {\n          var _children3 = [newChild];\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n    index++;\n  };\n  while (index < tree.length) {\n    _loop();\n  }\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n    stylesheet = _ref5.stylesheet,\n    useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n    language = _ref6.language,\n    code = _ref6.code,\n    defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n      children = _ref7.children,\n      _ref7$style = _ref7.style,\n      style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n      _ref7$customStyle = _ref7.customStyle,\n      customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n      _ref7$codeTagProps = _ref7.codeTagProps,\n      codeTagProps = _ref7$codeTagProps === void 0 ? {\n        className: language ? \"language-\".concat(language) : undefined,\n        style: _objectSpread({}, style['code[class*=\"language-\"]'], style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n      } : _ref7$codeTagProps,\n      _ref7$useInlineStyles = _ref7.useInlineStyles,\n      useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n      _ref7$showLineNumbers = _ref7.showLineNumbers,\n      showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n      _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n      showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n      _ref7$startingLineNum = _ref7.startingLineNumber,\n      startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n      lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n      _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n      lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n      wrapLines = _ref7.wrapLines,\n      _ref7$wrapLongLines = _ref7.wrapLongLines,\n      wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n      _ref7$lineProps = _ref7.lineProps,\n      lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n      renderer = _ref7.renderer,\n      _ref7$PreTag = _ref7.PreTag,\n      PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n      _ref7$CodeTag = _ref7.CodeTag,\n      CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n      _ref7$code = _ref7.code,\n      code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n      astGenerator = _ref7.astGenerator,\n      rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre'\n      });\n    }\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"names":["_objectWithoutProperties","_toConsumableArray","_objectSpread","React","createElement","checkForListedLanguage","newLineRegex","getNewLines","str","match","getAllLineNumbers","_ref","lines","startingLineNumber","style","map","_","i","number","key","concat","className","AllLineNumbers","_ref2","codeString","codeStyle","_ref2$containerStyle","containerStyle","float","paddingRight","_ref2$numberStyle","numberStyle","Object","assign","replace","split","getEmWidthOfNumber","num","toString","length","getInlineLineNumber","lineNumber","inlineLineNumberStyle","type","tagName","properties","children","value","assembleLineNumberStyles","lineNumberStyle","largestLineNumber","defaultLineNumberStyle","display","minWidth","textAlign","userSelect","customLineNumberStyle","assembledStyle","createLineElement","_ref3","showInlineLineNumbers","_ref3$lineProps","lineProps","_ref3$className","showLineNumbers","wrapLongLines","unshift","flattenCodeTree","tree","arguments","undefined","newTree","node","push","Set","classNames","processLines","codeTree","wrapLines","_ref4","lastLineBreakIndex","index","createWrappedLine","createUnwrappedLine","createLine","_loop","newLines","splitValue","forEach","text","newChild","_children","slice","_line","stringChild","lastLineInPreviousSpan","newElem","splice","_children2","_line2","_children3","_line3","line","apply","defaultRenderer","_ref5","rows","stylesheet","useInlineStyles","isHighlightJs","astGenerator","highlightAuto","getCodeTree","_ref6","language","code","defaultCodeValue","hasLanguage","highlight","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref7","_ref7$style","_ref7$customStyle","customStyle","_ref7$codeTagProps","codeTagProps","_ref7$useInlineStyles","_ref7$showLineNumbers","_ref7$showInlineLineN","_ref7$startingLineNum","lineNumberContainerStyle","_ref7$lineNumberStyle","_ref7$wrapLongLines","_ref7$lineProps","renderer","_ref7$PreTag","PreTag","_ref7$CodeTag","CodeTag","_ref7$code","Array","isArray","rest","allLineNumbers","defaultPreStyle","hljs","backgroundColor","generatorClassName","preProps","whiteSpace"],"sources":["C:/Users/luna-/OneDrive/Escritorio/smels/node_modules/react-syntax-highlighter/dist/esm/highlight.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    float: 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread({}, properties.style, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread({}, style['code[class*=\"language-\"]'], style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}